from aiogram import types, F
import keyboards
from tg import dp, db, bot
from state import UserState
from aiogram.fsm.context import FSMContext


@dp.callback_query(F.data.startswith('admin_panel'))
async def admin_panel_func(call: types.CallbackQuery):
    await call.message.edit_caption(
        caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ë–æ—Å—Å üßê\n"
                "<b>–ù–µ–º–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª:</b>\n\n"
                "<b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                "<b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–≤–æ–µ–≥–æ <b>—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n"
                "<i>–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –í–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫—Ä—É–∂–∫–∏ –∏ —Ç.–ø - <b>–ù–ï–¢</b></i>\n\n"
                "<b>–î–æ–±–∞–≤–∏—Ç—å/–£–±—Ä–∞—Ç—å 1 –∑–∞–¥–∞—á—É</b> - –ø–æ —Ñ–∞–∫—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ç—ã –Ω–∞–∂–º–µ—à—å —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏ —á–µ–ª–æ–≤–µ–∫—É –¥–æ–±–∞–≤–∏—Ç—Å—è/—É–±–µ—Ä–µ—Ç—Å—è 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
                "<i>–ù—É–∂–Ω–∞ –±–æ–ª—å—à–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏</i>\n\n", reply_markup=keyboards.admin_panel, parse_mode="HTML")


#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(F.data.startswith('statistics'))
async def statistics_func(call: types.CallbackQuery):
    await call.message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{db.all_users()}</b>", parse_mode="HTML")


#–†–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query(F.data.startswith('newsletter'))
async def newsletter_text(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—åüëá")
    await state.set_state(UserState.newsletter_wait_msg)


@dp.message(UserState.newsletter_wait_msg)
async def newsletter_func(msg: types.Message, state: FSMContext):
    users = db.get_user()
    fail = 0
    for row in users:
        try:
            await bot.send_message(row[0], msg.text)
        except:
            fail += 1
    await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n"
                     f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞: {fail}")
    await state.clear()


#–î–æ–±–∞–≤–∏—Ç—å 1 –∑–∞–¥–∞—á—É
@dp.callback_query(F.data.startswith('done_task'))
async def done_task(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüëá")
    await state.set_state(UserState.done_task_wait_id)


@dp.message(UserState.done_task_wait_id)
async def newsletter_func(msg: types.Message, state: FSMContext):
    if msg.text.isdigit():
        db.add_task(int(msg.text))
        await msg.answer("–£—Å–ø–µ—à–Ω–æ")
        await state.clear()
    else:
        await msg.answer('–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ üòå')


#–£–±—Ä–∞—Ç—å 1 –∑–∞–¥–∞—á—É
@dp.callback_query(F.data.startswith('fail_task'))
async def done_task(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüëá")
    await state.set_state(UserState.fail_task_wait_id)


@dp.message(UserState.fail_task_wait_id)
async def newsletter_func(msg: types.Message, state: FSMContext):
    if msg.text.isdigit():
        db.delete_task(int(msg.text))
        await msg.answer("–£—Å–ø–µ—à–Ω–æ")
        await state.clear()
    else:
        await msg.answer('–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ üòå')


#–ò–∑–º–µ–Ω–∏—Ç—å –î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
@dp.callback_query(F.data.startswith('edit deb'))
async def done_task(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüëá")
    await state.set_state(UserState.fail_task_wait_id)