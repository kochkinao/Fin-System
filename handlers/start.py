from aiogram import types, F
from aiogram.filters import CommandStart

import config
from config import photo
import keyboards
from tg import dp, bot, db



@dp.message(CommandStart())
async def start(msg: types.Message):
    if not db.user_exists(msg.from_user.id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        message = msg.text
        referrer_id = str(message[7:])
        if str(referrer_id) != "":  # –ï—Å–ª–∏ –æ–Ω –∑–∞—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
            if str(referrer_id) != str(msg.from_user.id):  # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –µ–≥–æ
                db.add_user(msg.from_user.id, referrer_id)
                try:
                    await bot.send_message(referrer_id, 'üëæ –ü–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
                except:
                    pass
            else:
                db.add_user(msg.from_user.id)
        else:
            db.add_user(msg.from_user.id)
    try:
        db.set_user_name(msg.from_user.full_name, msg.from_user.id)
    except:
        pass
    if msg.from_user.id in config.ADMIN:
        await bot.send_photo(msg.from_user.id, photo, caption=f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}üëã\n"
                                                              f"–Ø - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –¥–µ–Ω—é–∂–∫–∏ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üòä\n\n"
                                                              f"–°–ª–µ–¥—É–π –≤—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∞–π –≤—ã–ø–ª–∞—Ç—ã!\n\n"
                                                              f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞!</b>",
                             parse_mode="HTML", reply_markup=keyboards.admin_start_menu)
    else:
        await bot.send_photo(msg.from_user.id, photo, caption=f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}üëã\n"
                                                              f"–Ø - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –¥–µ–Ω—é–∂–∫–∏ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üòä\n\n"
                                                              f"–°–ª–µ–¥—É–π –≤—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –∏ –ø–æ–ª—É—á–∞–π –≤—ã–ø–ª–∞—Ç—ã!\n\n"
                                                              f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞!</b>",
                             parse_mode="HTML", reply_markup=keyboards.start_menu)


# –ó–∞—Ä–∞–±–æ—Ç–æ–∫ üí∞
@dp.callback_query(F.data.startswith('earnings'))
async def earnings_call(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=keyboards.earnings)


# –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã üìï
@dp.callback_query(F.data.startswith('rules'))
async def earnings_call(call: types.CallbackQuery):
    await call.message.edit_caption(caption="‚ùó<b>–ü–†–ê–í–ò–õ–ê –ë–û–¢–ê</b>‚ùóÔ∏è\n\n"
                                            "- <b>–ó–ê–ü–†–ï–©–ï–ù–û</b> –°–ø–∞–º–∏—Ç—å –≤ –ª—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏, –∂–¥–∏—Ç–µ, –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏\n\n"
                                            "- –õ—é–±–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∏–ª–∏ –∂–µ, –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏ –∏–∑–≥–Ω–∞–Ω–∏—é –∏–∑ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —á–∞—Ç–æ–≤\n\n"
                                            "- –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –Ω–∞–º –Ω—É–∂–Ω—ã –±—É–¥—É—Ç –æ—Ç –≤–∞—Å –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –º—ã –æ–±—è–∑—É–µ–º—Å—è, —á—Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö –º–µ—Å—Ç–∞—Ö –∏ –∫–æ–º–ø–∞–Ω–∏—è—Ö, –æ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –≤–∞–º —Ä–∞—Å—Å–∫–∞–∂–µ–º –∏ –≤—ã –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ\n\n"
                                            "–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–æ –º–µ—Ä–µ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ - @prosto_gleb2\n\n"
                                            "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã : –° 11:00 –ø–æ –ú–°–ö –¥–æ 18:00 –ø–æ –ú–°–ö",
                                    reply_markup=keyboards.back,
                                    parse_mode="HTML")


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò
@dp.callback_query(F.data.startswith('personal'))
async def earnings_call(call: types.CallbackQuery):
    if call.from_user.username is not None:
        username = f"@{call.from_user.username}"
    else:
        username = call.from_user.full_name
    await call.message.edit_caption(
        caption=f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\nüÜî <b>ID: </b>{call.from_user.id}\nü´Ç –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.get_referral(call.from_user.id)}\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {db.get_task_user(call.from_user.id)}",
        reply_markup=keyboards.personal_referal, parse_mode="HTML")


# –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚ùì
@dp.callback_query(F.data.startswith('answer_question'))
async def earnings_call(call: types.CallbackQuery):
    await call.message.answer(
        f"{call.from_user.full_name}, –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å—ãüòâ\n"
        "<b>1. –ú–Ω–µ –º–µ–Ω—å—à–µ 18 –ª–µ—Ç, —è —Å–º–æ–≥—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?</b>\n"
        "<i>- –ù–µ—Ç, —Ç–æ–ª—å–∫–æ 18+ –º–æ–≥—É—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–æ—Ç–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –∑–∞ –Ω–∏—Ö</i>\n\n"
        "<b>2. –í—ã–ø–ª–∞—Ç–∞ 1000—Ä, –∞ –ø–æ–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –Ω–∞ 1000—Ä —Å–¥–µ–ª–∞—Ç—å, –≤ —á–µ–º –ø—Ä–æ—Ñ–∏—Ç?</b>\n"
        "<i>- –¢—Ä–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤–∞—à–∏–º —Å–∞–º—ã–º –æ–±—ã—á–Ω—ã–º —Ç—Ä–∞—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏ —Ç–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ —Å –∫–∞—Ä—Ç—ã, –Ω–µ —Å–æ–≤–µ—Ç—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã —á–∞–µ–≤—ã—Ö</i>\n\n"
        "<b>3. –Ø –≤—Å–µ –æ—Ñ–æ—Ä–º–∏–ª, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ?</b>\n"
        "<i>- –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞–º –ø–æ–¥—Å–∫–∞–∂—É—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>\n\n"
        "<b>4. –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ —ç—Ç–∏ –∫–∞—Ä—Ç—ã, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ –±—É–¥–µ—Ç?</b>\n"
        "<i>- –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –º—ã –≤–∞—Å —É–≤–µ–¥–æ–º–∏–º –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Öüòè</i>\n\n"
        "<b>5. –Ø –≤—Å–µ —Å–∫–∏–Ω—É–ª –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –≤—ã–ø–ª–∞—Ç—ã?</b>\n"
        "<i>- –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —Ç–∞–º –æ–ø–∏—Å–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–ª–∞—Ç —Å–æ —Å—Ä–æ–∫–∞–º–∏. –ï—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Ä—É—à–∞—é—Ç—Å—è - –ø–∏—à–∏—Ç–µ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–∞–≤–∏–ª–∞'</i>\n\n"
        "<b>6. –ú–Ω–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –±–æ—Ç –∏ –≤–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã, —è –±—É–¥—É –¥–µ–ª–∞—Ç—å —Å–∞–º —á–µ—Ä–µ–∑ –ø–ø</b>\n"
        "<i>- –ú—ã –Ω–µ –∑–∞–ø—Ä–µ—â–∞–µ–º –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ù–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–ø –∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –æ–Ω–∏ –±–æ—Ç—É –ø—Ä–∏–¥—É—Ç. –ù–æ –≤–∞–º –æ–Ω–∏ –ø—Ä–∏–¥—É—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ó–∞ —ç—Ç–æ—Ç —Ä–∏—Å–∫ –±–æ—Ç –±–µ—Ä–µ—Ç —Å–µ–±–µ –æ—Ç 20 –¥–æ 50 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ñ—Ñ–µ—Ä–∞</i>\n\n"
        "<b>7. –í—ã –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç–µ –ª—é–¥–µ–π! –î–∞ –≤—ã, –¥–∞ —è...!</b>\n"
        "<i>- ...–±–∞–Ω</i>\n\n"
        "–ù—É –∞ —Ç–µ–ø–µ—Ä—å, —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ —Å –∫–∞–∂–¥—ã–º –∑–∞–¥–∞–Ω–∏–µ–º –∏ –ø–æ–Ω—è—Ç—å –µ–≥–æ —Å—É—Ç—å, <b>–∂–º–∏</b> –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–πüòâ",
        reply_markup=keyboards.back, parse_mode="HTML", disable_notification=True)


# –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ üë®
@dp.callback_query(F.data.startswith('friend'))
async def earnings_call(call: types.CallbackQuery):
    await call.message.edit_caption(
        caption=f"{call.from_user.full_name}, —è —Ä–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ü§ó\n\n"
                "<b>–ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–∑–µ–π:</b>\n"
                "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 2000‚ÇΩ\n\n"
                "–£ –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–ø–ª–∞—Ç\n"
                "–ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å 200—Ä\n"
                "–°—á–∏—Ç–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ 10 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
                "<b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ</b>\n"
                "–î—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 1 –∑–∞–¥–∞–Ω–∏–µ - –≤—ã–ø–ª–∞—Ç–∞ 200‚ÇΩ\n"
                "–î—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏—è - –≤—ã–ø–ª–∞—Ç–∞ 600‚ÇΩ\n"
                "–î—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏–ª 8 –∑–∞–¥–∞–Ω–∏–π - –≤—ã–ø–ª–∞—Ç–∞ 1600‚ÇΩ\n"
                "<b>–í—ã–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç 3+ –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
                "<b>–í–∞–∂–Ω–æ</b>\n"
                "–ì—Ä–∞–º–æ—Ç–Ω–æ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–º–∞–Ω–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –º—ã –±—É–¥–µ–º –≤—ã–Ω—É–∂–¥–µ–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –µ–≥–æ –∏ –≤–∞—Å, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\n"
                "–≠—Ç–æ–≥–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –Ω–∏ –Ω–∞–º, –Ω–∏ –≤–∞–º, –ø–æ—ç—Ç–æ–º—É, –¥–∞–≤–∞–π—Ç–µ –∂–∏—Ç—å –¥—Ä—É–∂–Ω–æ –∏ —á–µ—Å—Ç–Ω–æüòâ",
        reply_markup=keyboards.referal,
        parse_mode="HTML")


@dp.callback_query(F.data.startswith('leader_board'))
async def earnings_call(call: types.CallbackQuery):
    user = list(db.get_all_task_user())
    for i in range(1, 10)
        print(i)
        task_num = sorted(user)[len(sorted(user))-i][0]
        id_num = sorted(user)[len(sorted(user))-i][1]
        name_num = sorted(user)[len(sorted(user))-i][1]
    print(sorted(user))